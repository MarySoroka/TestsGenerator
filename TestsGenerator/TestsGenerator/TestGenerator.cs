using System.Linq;
using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp;
using Microsoft.CodeAnalysis.CSharp.Syntax;

namespace TestsGenerator

{
    public class TestGenerator
    {
        private static readonly AttributeSyntax TestMethodAttribute =
            SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestMethod"));

        private static readonly AttributeSyntax TestClassAttribute =
            SyntaxFactory.Attribute(SyntaxFactory.ParseName("TestClass"));

        public static TestClassInfo[] Generate(string content)
        {
            var treeRoot = CSharpSyntaxTree.ParseText(content).GetRoot();
            return (from userClass in treeRoot.DescendantNodes().OfType<ClassDeclarationSyntax>()
                let className = userClass.Identifier.ValueText
                let currentNamespace =
                    SyntaxFactory.NamespaceDeclaration(SyntaxFactory.ParseName(className + "UnitTests"))
                let classSignature = SyntaxFactory.ClassDeclaration($"{className}Test")
                    .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                    .AddAttributeLists(
                        SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(TestClassAttribute)))
                let classMethods = Enumerable.OfType<MethodDeclarationSyntax>(userClass.DescendantNodes())
                    .Where(method => method.Modifiers.Any(SyntaxKind.PublicKeyword))
                let classCode = SyntaxFactory.CompilationUnit()
                    .AddUsings(CreateUsing(treeRoot))
                    .AddMembers(currentNamespace.AddMembers(classSignature.AddMembers(classMethods
                        .Select(method => CreateMethod($"Test{method.Identifier.ValueText}")).ToArray())))
                select new TestClassInfo(className, classCode.NormalizeWhitespace().ToFullString())).ToArray();
        }


        private static UsingDirectiveSyntax[] CreateUsing(SyntaxNode root)
        {
            var classNamespace = root.DescendantNodes().OfType<NamespaceDeclarationSyntax>().Single().Name.ToString();
            return root.DescendantNodes().OfType<UsingDirectiveSyntax>()
                .Append(SyntaxFactory.UsingDirective(SyntaxFactory.ParseName(classNamespace)))
                .Append(SyntaxFactory.UsingDirective(
                    SyntaxFactory.ParseName("Microsoft.VisualStudio.TestTools.UnitTesting"))).ToArray();
        }

        private static MethodDeclarationSyntax CreateMethod(string methodName)
        {
            var method = SyntaxFactory.MethodDeclaration(SyntaxFactory.ParseTypeName("void"), methodName)
                .AddModifiers(SyntaxFactory.Token(SyntaxKind.PublicKeyword))
                .AddBodyStatements(SyntaxFactory.ParseStatement("Assert.Fail(\"autogenerated\");")).AddAttributeLists(
                    SyntaxFactory.AttributeList(SyntaxFactory.AttributeList().Attributes.Add(TestMethodAttribute)));

            return method;
        }
    }
}